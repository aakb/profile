<?php
/**
 * @file
 * Alter paths and build statistics for users.
 */

include_once 'loop_admin.features.inc';

/**
 * Implements hook_admin_paths_alter().
 *
 * Setup permissions for user pages and create user pages.
 */
function loop_admin_admin_paths_alter(&$paths) {
  // Treat all user pages as not administrative.
  $paths['user/*'] = FALSE;
  $paths['admin/people/create'] = FALSE;
}

/**
 * Implements hook_FORM_ID_form_alter().
 *
 * Add full name to author information tab.
 */
function loop_admin_form_post_node_form_alter(&$form, &$form_state) {
  $account = user_load($form['uid']['#value']);

  $name = _loop_admin_generate_full_name($account);
  if (!$name) {
    $name = t('Not set');
  }
  $form['author']['name']['#title'] .= ' fullname: <span>' . $name . '</span>';
}

/**
 * Implements hook_menu().
 */
function loop_admin_menu() {
  $items = array();

  $items['editor/dashboard/user-statistics'] = array(
    'title' => 'LOOP User statistics',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_loop_admin_user_statistics_form'),
    'access arguments' => array('access user profiles'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Menu callback that generates the table.
 *
 * @throws Exception
 */
function _loop_admin_user_statistics_form($form, &$form_state) {
  // Define header and fields to sort on.
  $header = array(
    array('data' => t('UID'), 'field' => 'uid'),
    array('data' => t('Username'), 'field' => 'username'),
    array('data' => t('Full name'), 'field' => 'fullname'),
    array('data' => t('Accepted answers'), 'field' => 'accepted'),
    array('data' => t('Comments'), 'field' => 'comments'),
    array('data' => t('Thumb ups'), 'field' => 'thumbs'),
  );

  // Check for filter values.
  $filter = array();
  if (isset($form_state['input']['filter']['start_date']['date'])) {
    $filter['date']['start'] = strtotime($form_state['input']['filter']['start_date']['date']);
  }

  if (isset($form_state['input']['filter']['end_date']['date'])) {
    $filter['date']['end'] = strtotime($form_state['input']['filter']['end_date']['date']);
  }

  // Get query.
  $query = _loop_admin_user_statistics_query($filter);

  // Enable table sort on headers.
  $query->extend('TableSort')->orderByHeader($header);

  // Enabled pager.
  $query = $query->extend('PagerDefault')->limit(25);

  // Execute query.
  $result = $query->execute();

  // Looping for filling the table rows.
  $rows = array();
  foreach ($result as $row) {
    // Fill the table rows.
    $rows[] = array(
      l($row->uid, 'user/' . $row->uid),
      l($row->username, 'user/' . $row->uid),
      l($row->fullname, 'user/' . $row->uid),
      $row->accepted,
      $row->comments,
      $row->thumbs,
    );
  }

  // Build filter field set.
  $collapsed = !isset($form_state['input']['filter']['start_date']['date']);
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter list'),
    '#collapsed' => $collapsed,
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );

  $form['filter']['start_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('Start'),
    '#required' => TRUE,
    '#date_format' => 'd-m-Y',
    '#date_label_position' => 'none',
    '#attributes' => array('autocomplete' => 'off'),
  );

  $form['filter']['end_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('End'),
    '#required' => TRUE,
    '#date_format' => 'd-m-Y',
    '#date_label_position' => 'none',
    '#attributes' => array('autocomplete' => 'off'),
  );

  // Add Ajax submit button (as form submits to own address and loads twice,
  // hence values are empty on load).
  $form['filter']['submit'] = array(
    '#type' => 'button',
    '#value' => t('Filter'),
    '#ajax' => array(
      'callback' => '_loop_admin_user_statistics_ajax_callback',
      'wrapper' => 'replace-stats',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  // Add wrapper to replace on filter.
  $form['stats'] = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="replace-stats">',
    '#suffix' => '</div>',
  );

  // Theme table.
  $form['stats']['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('Table has no row!'),
  );

  // Add pager.
  $form['stats']['pager'] = array(
    '#type' => 'markup',
    '#markup' => theme('pager'),
  );

  return $form;
}

/**
 * Ajax callback for the filter form.
 */
function _loop_admin_user_statistics_ajax_callback($form, $form_state) {
  $form = _loop_admin_user_statistics_form($form, $form_state);
  return $form['stats'];
}

/**
 * Build query to find statistics information.
 *
 * @param array $filter
 *   The different values to filter on.
 *
 * @return SelectQuery
 *   Query to run against the database.
 */
function _loop_admin_user_statistics_query($filter = array()) {
  // Start with the comment table.
  $query = db_select('comment', 'comment');

  // Count comments for a user.
  $query->addExpression('COUNT(comment.cid)', 'comments');

  // Add user information.
  $query->rightJoin('users', 'u', 'comment.uid = u.uid');
  $query->addField('u', 'uid', 'uid');
  $query->addField('u', 'name', 'username');

  // Add username.
  $query->join('field_data_field_first_name', 'fn', 'fn.entity_id = u.uid');
  $query->join('field_data_field_last_name', 'ln', 'ln.entity_id = u.uid');
  $query->addField('fn', 'field_first_name_value', 'firstname');
  $query->addField('ln', 'field_last_name_value', 'lastname');
  $query->addExpression("CONCAT_WS(' ', fn.field_first_name_value, ln.field_last_name_value)", 'fullname');

  // Group by each user.
  $query->groupBy('u.uid');

  // Get thumbs up.
  if (isset($filter['date'])) {
    $query->addExpression("(SELECT count(*) FROM flagging WHERE flagging.entity_type = 'comment' AND flagging.uid = u.uid AND timestamp >= :start_date AND timestamp <= :end_date)", 'thumbs', array('start_date' => $filter['date']['start'], 'end_date' => $filter['date']['end']));
  }
  else {
    $query->addExpression("(SELECT count(*) FROM flagging WHERE flagging.entity_type = 'comment' AND flagging.uid = u.uid)", 'thumbs');
  }

  // Get most accepted answers.
  if (isset($filter['date'])) {
    $query->addExpression("(SELECT count(*) FROM (SELECT c.uid, MAX(fc.count) FROM node n JOIN comment c ON n.nid = c.nid JOIN flag_counts fc ON c.cid = fc.entity_id JOIN flagging f ON f.entity_id = c.cid WHERE fc.entity_type = 'comment' AND f.timestamp >= :start_date AND f.timestamp <= :end_date GROUP BY n.nid) AS count WHERE count.uid = u.uid)", 'accepted', array('start_date' => $filter['date']['start'], 'end_date' => $filter['date']['end']));
  }
  else {
    $query->addExpression("(SELECT count(*) FROM (SELECT c.uid, MAX(fc.count) FROM node n JOIN comment c ON n.nid = c.nid JOIN flag_counts fc ON c.cid = fc.entity_id WHERE fc.entity_type = 'comment' GROUP BY n.nid) AS count WHERE count.uid = u.uid)", 'accepted');
  }

  // Filter the whole query on date.
  if (isset($filter['date'])) {
    $query->where("comment.cid IN (SELECT entity_id FROM flagging f WHERE f.entity_type = 'comment' AND f.timestamp >= :start_date AND f.timestamp <= :end_date)", array('start_date' => $filter['date']['start'], 'end_date' => $filter['date']['end']));
  }

  return $query;
}

/**
 * Get full name from an user account.
 *
 * @param StdClass $account
 *   Drupal user account.
 *
 * @return string
 *   The users full name.
 */
function _loop_admin_generate_full_name($account) {
  $name = '';
  if (isset($account->field_first_name['und'][0]['safe_value'])) {
    $name = '' . $account->field_first_name['und'][0]['safe_value'];
    if (isset($account->field_last_name['und'][0]['safe_value'])) {
      $name .= ' ' . $account->field_last_name['und'][0]['safe_value'];

    }
  }

  return $name;
}
