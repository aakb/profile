<?php
/**
 * @file
 * Alter paths and build statistics for users.
 */

include_once 'loop_admin.features.inc';

/**
 * Implements hook_admin_paths_alter().
 *
 * Setup permissions for user pages and create user pages.
 */
function loop_admin_admin_paths_alter(&$paths) {
  // Treat all user pages as not administrative.
  $paths['user/*'] = FALSE;
  $paths['admin/people/create'] = FALSE;
}

/**
 * Implements hook_FORM_ID_form_alter().
 *
 * Add full name to author information tab.
 */
function loop_admin_form_post_node_form_alter(&$form, &$form_state) {
  $account = user_load($form['uid']['#value']);

  $name = _loop_admin_generate_full_name($account);
  if (!$name) {
    $name = t('Not set');
  }
  $form['author']['name']['#title'] .= ' fullname: <span>' . $name . '</span>';
}

/**
 * Implements hook_menu().
 */
function loop_admin_menu() {
  $items = array();

  $items['editor/dashboard/user-statistics'] = array(
    'title' => 'LOOP User statistics',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_loop_admin_user_statistics_form'),
    'access arguments' => array('access user profiles'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Menu callback that generates the table.
 *
 * @throws Exception
 */
function _loop_admin_user_statistics_form() {
  // Define header and fields to sort on.
  $header = array(
    array('data' => t('UID'), 'field' => 'uid'),
    array('data' => t('Username'), 'field' => 'username'),
    array('data' => t('Full name'), 'field' => 'fullname'),
    array('data' => t('Accepted answers'), 'field' => 'accepted'),
    array('data' => t('Comments'), 'field' => 'comments'),
    array('data' => t('Thumb ups'), 'field' => 'thumbs'),
  );

  // Get query.
  $query = _loop_admin_user_statistics_query();

  // Enable table sort on headers.
  $query->extend('TableSort')->orderByHeader($header);

  // Enabled pager.
  $query = $query->extend('PagerDefault')->limit(10);

  // Execute query.
  $result = $query->execute();

  // Looping for filling the table rows.
  $rows = array();
  foreach ($result as $row) {
    // Fill the table rows.
    $rows[] = array(
      l($row->uid, 'user/' . $row->uid),
      l($row->username, 'user/' . $row->uid),
      l($row->fullname, 'user/' . $row->uid),
      $row->accepted,
      $row->comments,
      $row->thumbs,
    );
  }

  // Theme table.
  $form['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('Table has no row!'),
  );

  // Add pager.
  $form['pager'] = array(
    '#type' => 'markup',
    '#markup' => theme('pager'),
  );

  return $form;
}

/**
 * Build query to find statistics information.
 *
 * @return SelectQuery
 *   Query to run against the database.
 */
function _loop_admin_user_statistics_query() {
  // Start with the comment table.
  $query = db_select('comment', 'comment');

  // Count comments for a user.
  $query->addExpression('COUNT(comment.cid)', 'comments');

  // Add user information.
  $query->rightJoin('users', 'u', 'comment.uid = u.uid');
  $query->addField('u', 'uid', 'uid');
  $query->addField('u', 'name', 'username');

  // Add username.
  $query->join('field_data_field_first_name', 'fn', 'fn.entity_id = u.uid');
  $query->join('field_data_field_last_name', 'ln', 'ln.entity_id = u.uid');
  $query->addField('fn', 'field_first_name_value', 'firstname');
  $query->addField('ln', 'field_last_name_value', 'lastname');
  $query->addExpression("CONCAT_WS(' ', fn.field_first_name_value, ln.field_last_name_value)", 'fullname');

  // Group by each user.
  $query->groupBy('u.uid');

  // Get thumbs up.
  $query->addExpression("(SELECT count(*) FROM flagging WHERE flagging.entity_type = 'comment' AND flagging.uid = u.uid)", 'thumbs');

  // Get most accepted answers.
  $query->addExpression("IFNULL((SELECT count(*) FROM flag_counts fc JOIN comment c ON c.cid = fc.entity_id JOIN node n ON n.nid = c.nid WHERE entity_type = 'comment' AND c.uid = u.uid GROUP BY c.uid), 0)", 'accepted');

  return $query;
}

/**
 * Get full name from an user account.
 *
 * @param $account
 *  Drupal user account.
 *
 * @return string
 *  The users full name.
 */
function _loop_admin_generate_full_name($account) {
  $name = '';
  if (isset($account->field_first_name['und'][0]['safe_value'])) {
    $name = '' . $account->field_first_name['und'][0]['safe_value'];
    if (isset($account->field_last_name['und'][0]['safe_value'])) {
      $name .= ' ' . $account->field_last_name['und'][0]['safe_value'];

    }
  }

  return $name;
}
