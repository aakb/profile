<?php

/**
 * @file
 * Autcomplete Apache Solr search module.
 */

include_once 'loop_search.features.inc';

/**
 * Implements hook_install().
 *
 * jQuery version check.
 */
function loop_search_install() {
  // Check jQuery version.
  $jquery_version = variable_get('jquery_update_jquery_version', 1.5);

  // Update jQuery version to version 1.9.
  if ($jquery_version < 1.9) {
    variable_set('jquery_update_jquery_version', 1.9);
  }

  // Check jQuery admin pages version.
  $jquery_admin_version = variable_get('jquery_update_jquery_admin_version', 1.5);

  // Update jQuery admin pages to version 1.8.
  if ($jquery_admin_version < 1.8) {
    variable_set('jquery_update_jquery_admin_version', 1.8);
  }
}

/**
 * Return every node of type post in JSON format.
 *
 * @return string
 *   JSON object.
 */
function loop_search_nodes() {
  // Select nodes.
  $nodes = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1)
    ->condition('type', 'post')
    ->execute();

  // Build nodes.
  $data = array();
  foreach ($nodes as $node) {
    $data[] = array(
      // For better search, use strtolower.
      'value' => strtolower(trim($node->title)),
      // Fine human output.
      'title' => trim($node->title),
      // Use internal path.
      'link' => '/'. drupal_get_path_alias('node/' . $node->nid),
    );
  }

  // Return as JSON.
  drupal_json_output($data);
}

/**
 * Implements hook_init().
 *
 * Include search JS for every pageload!
 */
function loop_search_init() {
  drupal_add_js(drupal_get_path('module', 'loop_search') . '/handlebars-v1.2.0.js');
  drupal_add_js(drupal_get_path('module', 'loop_search') . '/typeahead.bundle.js');
  drupal_add_js(drupal_get_path('module', 'loop_search') . '/loop_search.js');
}

/**
 * Implements hook_menu().
 */
function loop_search_menu() {
  $items['loop_search_nodes'] = array(
    'title' => 'List nodes in JSON format',
    'page callback' => 'loop_search_nodes',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}


function loop_search_theme($vars) {
  return array(
    'loop_search_theme' => array(
      'render element' => 'form',
      'template' => 'loop-search--form',
    ),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter search form for Twitter Typeahead.
 */
function loop_search_form_search_api_page_search_form_default_alter(&$form, &$form_state) {
  // Add class to submit.
  $form['submit_1']['#attributes']['class'][] = 'typeahead-block--button';

  // Inline styling needed for Twitter Typeahead.
  $form['keys_1']['#attributes']['style'] = "position: relative; vertical-align: top; background-color: transparent;";

  // Default placeholder.
  $form['keys_1']['#attributes']['placeholder'] =  t('E.g. "How do you document a subject"');

  // Yet again, some id and classes for Twitter Typehead.
  $form['keys_1']['#attributes']['id'][] = 'typeahead';
  $form['keys_1']['#attributes']['class'][] = 'typeahead';
  $form['keys_1']['#attributes']['class'][] = 'tt-query';

  // Figure out if we need a default value.
  $arg = arg();
  if ($arg[0] == "node" && is_numeric($arg[1])) {
    // Load currect node.
    $node = node_load($arg[1]);

    // Load entity wrapper.
    $wrapper = entity_metadata_wrapper('node', $node);

    // Get description field.
    $description = $wrapper->field_description->value();

    // Verify its a string.
    if (is_string($description)) {
      // Change default value.
      $form['keys_1']['#default_value'] = $wrapper->field_description->value();
    }
  }
}
