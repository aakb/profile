<?php

/**
 * @file
 * Autcomplete Apache Solr search module.
 */

include_once 'loop_search.features.inc';

/**
 * Return every node of type post in JSON format.
 *
 * @return string
 *   JSON object.
 */
function loop_search_nodes() {
  // Select nodes.
  $nodes = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1)
    ->condition('type', 'post')
    ->execute();

  // Build nodes.
  $data = array();
  foreach ($nodes as $node) {
    $data[] = array(
      // For better search, use strtolower.
      'value' => strtolower(trim($node->title)),
      // Fine human output.
      'title' => trim($node->title),
      // Use internal path.
      'link' => '/' . drupal_get_path_alias('node/' . $node->nid),
    );
  }

  // Return as JSON.
  drupal_json_output($data);
}

/**
 * Implements hook_init().
 *
 * Include search JS for every pageload!
 */
function loop_search_init() {
  global $user;

  // Check if it's a registered user.
  if ($user->uid > 0) {
    drupal_add_js(drupal_get_path('module', 'loop_search') . '/handlebars-v1.2.0.js');
    drupal_add_js(drupal_get_path('module', 'loop_search') . '/typeahead.bundle.js');
    drupal_add_js(drupal_get_path('module', 'loop_search') . '/loop_search.js');
  }
}

/**
 * Implements hook_menu().
 */
function loop_search_menu() {
  $items['loop_search_nodes'] = array(
    'title' => 'List nodes in JSON format',
    'page callback' => 'loop_search_nodes',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['loop_search_documents/%'] = array(
    'title' => 'List documents in JSON format',
    'page callback' => 'loop_search_documents',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Find documents (leafs) and output as JSON.
 *
 * @param string $scope
 *   Comma separated list to search for.
 *
 * @return string
 *   JSON object.
 */
function loop_search_documents($scope) {
  // Explode to array.
  $titles = explode(',', $scope);

  // Title filter.
  $or = db_or();
  foreach ($titles as $title) {
    $or->condition("title", $title . "%", 'LIKE');
  }

  // Fetch node ID and tiitle.
  $nodes = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', 'leaf')
    ->condition('status', 1)
    ->condition($or)
    ->execute();

  $data = array();
  foreach ($nodes as $node) {
    $data[] = array(
      // For better search, use strtolower().
      'value' => strtolower(trim($node->title)),
      // Fine human output.
      'title' => trim($node->title),
      // Use internal path.
      'link' => '/' . drupal_get_path_alias('node/' . $node->nid),
    );
  }

  // Return as JSON.
  drupal_json_output($data);
}

/**
 * Implements hook_theme().
 */
function loop_search_theme() {
  return array(
    'loop_search_theme' => array(
      'render element' => 'form',
      'template' => 'loop-search--form',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter search form for Twitter Typeahead.
 */
function loop_search_form_search_api_page_search_form_default_alter(&$form) {
  // Fetch search page id
  $default_page_id = db_query("SELECT id FROM {search_api_page} WHERE index_id = 'post'")->fetchField();

  $form['#attributes']['class'] = 'js--search';

  // Add class to submit.
  $form['submit_' . $default_page_id]['#attributes']['class'][] = 'typeahead-block--button';

  // Inline styling needed for Twitter Typeahead.
  $form['keys_' . $default_page_id]['#attributes']['style'] = "position: relative; vertical-align: top; background-color: transparent;";

  // Default placeholder.
  $form['keys_' . $default_page_id]['#attributes']['placeholder'] = t('E.g. "How do you document a subject"');

  // Yet again, some id and classes for Twitter Typehead.
  $form['keys_' . $default_page_id]['#attributes']['id'][] = 'typeahead';
  $form['keys_' . $default_page_id]['#attributes']['class'][] = 'typeahead';
  $form['keys_' . $default_page_id]['#attributes']['class'][] = 'tt-query';

  // Figure out if we need a default value.
  $arg = arg();
  if ($arg[0] == "node" && is_numeric($arg[1])) {
    // Load correct node.
    $node = node_load($arg[1]);
    if ($node->type == 'post') {
      // Load entity wrapper.
      $wrapper = entity_metadata_wrapper('node', $node);

      // Get description field.
      $description = $wrapper->field_description->value();

      // Verify its a string.
      if (is_string($description)) {
        // Change default value.
        $form['keys_' . $default_page_id]['#default_value'] = $wrapper->field_description->value();
      }
    }
  }
}
