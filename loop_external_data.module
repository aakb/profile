<?php
/**
 * @file
 * Code for the Loop External data feature.
 */

include_once 'loop_external_data.features.inc';
include 'parser.php';
include 'iParser.inc';
include 'Node.php';
include 'LoopIndex.php';
include 'Leaf.php';
include 'Tree.php';


/**
 * Implements hook_node_insert().
 */
function loop_external_data_node_insert($node) {
  if ($node->type == 'index') {
    _loop_external_data_file_load($node);
  }
}

/**
 * Implements hook_node_update().
 */
function loop_external_data_node_update($node) {
  if ($node->type == 'index') {
    //_loop_external_data_file_load($node);
  }
}

function _loop_external_data_file_load($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $file_fid = $wrapper->field_file->value();

  $file = file_load($file_fid['fid']);

  $parser = new Parser();
  $data = $parser->parse(drupal_realpath($file->uri), drupal_realpath('public://index_file/' . $file->fid));

  // Check if data is returned.
  if (!empty($data)) {
    // Send data and node id to parser.
    _loop_external_data_parser($data, $node->nid);
  }
}

function _loop_external_data_parser($data, $parent = NULL) {
  // Figure out what type we got.
  $class_type = get_class($data);
  switch ($class_type) {
    case 'LoopIndex':
      return _loop_external_data_parser_index($data, $parent);
    case 'Tree':
      return _loop_external_data_parser_tree($data, $parent);
      break;

    case 'Leaf':
      return _loop_external_data_parser_leaf($data, $parent);
      break;
  }

  return $data;
}

function _loop_external_data_parser_index($index, $parent) {
  $children = $index->getChildren();
  if (!empty($children)) {
    foreach ($children as $child) {
      _loop_external_data_parser($child, $parent);
    }
  }
}

function _loop_external_data_parser_tree($tree, $parent = NULL) {
  global $user;
  $node = new Stdclass();

  $node->type = 'tree';
  $node->language = LANGUAGE_NONE;
  $node->status = 1;
  $node->uid = $user->uid;
  $node->title = $tree->getTitle();

  node_save($node);

  $children = $tree->getChildren();
  foreach ($children as $child) {
    _loop_external_data_parser($child, $node->nid);
  }

  _loop_external_data_add_child($parent, $node);
}

function _loop_external_data_parser_leaf($leaf, $parent = NULL) {
  global $user;
  $node = new Stdclass();

  $node->type = 'leaf';
  $node->language = LANGUAGE_NONE;
  $node->status = 1;
  $node->uid = $user->uid;
  $node->title = $leaf->getTitle();

  node_save($node);

  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->body = array(
    'value' => $leaf->getBody(),
    'format' => 'filtered_html'
  );
  $wrapper->save();

  _loop_external_data_add_child($parent, $node);
}

function _loop_external_data_add_child($node, $child) {
  $parentNode = node_load($node);
  $wrapper = entity_metadata_wrapper('node', $parentNode);
  if ($parentNode->type == 'tree') {
    $wrapper->field_leaf[] = intval($child->nid);
  }
  else if ($parentNode->type == 'index') {
    $wrapper->field_tree[] = intval($child->nid);
  }

  $wrapper->save();
}
