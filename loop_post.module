<?php
/**
 * @file
 * Code for the Loop Post feature.
 */

include_once 'loop_post.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Sets the profession field to the same as the current user.
 * Figure out if profession is linked to a subject, set it as default.
 */
function loop_post_form_node_form_alter(&$form, &$form_state) {
  global $user;
  // We need the field_profession field, so lets fire up user_load!
  $account = user_load($user->uid);

  // Fetch profession field from user.
  $fetched_field_profession = field_get_items('user', $account, 'field_profession');

  // Set up profession field.
  if ($fetched_field_profession) {
    $form['field_profession'][LANGUAGE_NONE]['#default_value'] = array(0 => $fetched_field_profession['0']['tid']);
  }
}

/**
 * Implements of hook_block_info().
 */
function loop_post_block_info() {
  // This example comes from node.module.
  $blocks['subscriptions'] = array(
    'info' => t('Page subscriptions'),
    'cache' => DRUPAL_NO_CACHE
  );
  return $blocks;
}

/**
 * Implements of hook_block_view().
 */
function loop_post_block_view($delta = '') {
  // Check if user has the correct permission.
  if (!user_access('create subscriptions')) {
    return array();
  }

  $block = array();
  switch ($delta) {
    case 'subscriptions':
      // Get currect subscription status.
      $list = notifications_subscription_list('page subscriptions')
        ->filter_option('subscriptions_block');
      if ($list->count()) {
        $block['subject'] = t('Subscriptions');
        $items = array();
        foreach ($list->get_instances() as $subscription) {
          // Build urls.
          $items[] = loop_post_generate_link($subscription);
        }
        $block['content'] = $items;
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function loop_post_theme($existing, $type, $theme, $path) {
  return array(
    'loop_post_subscription_list' => array(
      'variables' => array(
        'link' => NULL,
      ),
      'template' => 'templates/loop-post-subscription-list',
    ),
  );
}

/**
 * Generate (un)subscribe links with signature.
 *
 * @param $subscription
 *   Subscription object.
 *
 * @return array
 *   Render array.
 */
function loop_post_generate_link($subscription) {
  $item = array();

  // Build query for signature.
  $item['query'] = array(
    'destination' => 'node/' . arg(1),
    'timestamp' => REQUEST_TIME,
    'skip' => 1,
  );

  if ($subscription->sid > 0) {
    // Subscribed to content
    $item['type'] = 'Unsubscribe';
    $item['url'] = 'notifications/unsubscribe/' . $subscription->sid;
  }
  else {
    $item['type'] = 'Subscribe';
    $item['url'] = 'notifications/subscribe/content_thread';
    $item['query']['0'] = arg(1);
  }

  // Find signature.
  $item['query']['signature'] = notifications_url_signature($item['url'], $item['query']);

  // Return render array.
  return array(
    '#theme' => 'loop_post_subscription_list',
    '#link' => array(
      '#text' => $item['type'],
      '#path' => $item['url'],
      '#query' => $item['query'],
      '#url' => l($item['type'], $item['url'], array('query' => $item['query'])),
    ),
  );
}

/**
 * Implements hook_node_insert().
 *
 * Auto subscribe newly created content to user.
 */
function loop_post_node_insert($node) {
  include_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'notifications') . '/notifications_content/notifications_content.inc');
  include_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'notifications') . '/notifications.subscription.inc');
  global $user;
  $sub = new Notifications_Content_Subscription();

  $sub->type = 'content_thread';

  $subscription = $sub
    ->instance()
    ->set_user($user)
    ->set_node($node);

  $subscription->save();
}