<?php
/**
 * @file
 * Code for the Loop editor pages feature.
 */

include_once 'loop_editor_pages.features.inc';

/**
 * Implements hook_menu().
 */
function loop_editor_pages_menu() {
  $items = array();

  $items['loop_dashboard_search_questions'] = array(
    'title' => 'List nodes in JSON format',
    'page callback' => 'loop_editor_pages_questions',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['loop_dashboard_search_comments'] = array(
    'title' => 'List nodes in JSON format',
    'page callback' => 'loop_editor_pages_comments',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['loop_dashboard_search_other_content'] = array(
    'title' => 'List nodes in JSON format',
    'page callback' => 'loop_editor_pages_other_content',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Return every node of type post in JSON format.
 *
 * @return string
 *   JSON object.
 */
function loop_editor_pages_questions() {
  // Select nodes.
  $nodes = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1)
    ->condition('type', 'post')
    ->execute();

  // Build nodes.
  $data = array();
  foreach ($nodes as $node) {
    $comments = db_select('comment', 'c')
      ->fields('c')
      ->condition('nid', $node->nid)
      ->execute();
    $num_of_results = $comments->rowCount();

    $data[] = array(
      'title' => trim($node->title),
      'nid' => $node->nid,
      'date' => format_date($node->created, 'medium'),
      'coms' => $num_of_results,
      'ts' => $node->created,
    );
  }

  // Return as JSON.
  drupal_json_output($data);
}

/**
 * Return every comment of type post in JSON format.
 *
 * @return string
 *   JSON object.
 */
function loop_editor_pages_comments() {
  // Select nodes.
  $comments = db_select('comment', 'c');
  $comments->leftJoin('node', 'n', 'c.nid = n.nid');
  $comments->leftJoin('field_data_field_user_image', 'i', 'c.uid = i.entity_id');
  $comments->leftJoin('file_managed', 'f', 'f.fid = i.field_user_image_fid');
  $comments
    ->fields('n', array('title'))
    ->fields('c', array('cid', 'nid', 'subject', 'created', 'uid'))
    ->fields('f', array('uri'))
    ->condition('c.status', 1);

  $comments = $comments->execute();

  // Build nodes.
  $data = array();
  foreach ($comments as $comment) {
    $data[] = array(
      'subject' => trim($comment->subject),
      'cid' => $comment->cid,
      'date' => format_date($comment->created, 'medium'),
      'ts' => $comment->created,
      'nid' => $comment->nid,
      'uri' => image_style_url('profile', $comment->uri),
      'uid' => $comment->uid,
      'content-title' => $comment->title,
    );
  }

  // Return as JSON.
  drupal_json_output($data);
}

/**
 * Return every comment of type post in JSON format.
 *
 * @return string
 *   JSON object.
 */
function loop_editor_pages_other_content() {
  // Select nodes.
  $nodes = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1)
    ->condition('type', 'post', '<>')
    ->condition('type', 'page', '<>')
    ->execute();

  // Build nodes.
  $data = array();
  foreach ($nodes as $node) {
    $data[] = array(
      'title' => trim($node->title),
      'nid' => $node->nid,
      'date' => format_date($node->created, 'medium'),
      'ts' => $node->created,
    );
  }

  // Return as JSON.
  drupal_json_output($data);

}

/**
 * Implements hook_block_info().
 */
function loop_editor_pages_block_info() {
  $blocks['loop_dashboard_questions'] = array(
    'info' => t('Dashboard questions'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['loop_dashboard_comments'] = array(
    'info' => t('Dashboard comments'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['loop_dashboard_other_content'] = array(
    'info' => t('Dashboard other content'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function loop_editor_pages_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'loop_dashboard_questions':
      $block['content'] = array('#theme' => 'loop_dashboard_questions');
      drupal_add_js(drupal_get_path('module', 'loop_editor_pages') . '/js/dashboard_questions.js');
      break;

    case 'loop_dashboard_comments':
      $block['content'] = array('#theme' => 'loop_dashboard_comments');
      drupal_add_js(drupal_get_path('module', 'loop_editor_pages') . '/js/dashboard_comments.js');
      break;

    case 'loop_dashboard_other_content':
      $block['content'] = array('#theme' => 'loop_dashboard_other_content');
      drupal_add_js(drupal_get_path('module', 'loop_editor_pages') . '/js/dashboard_other_content.js');
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function loop_editor_pages_theme() {
  return array(
    'loop_dashboard_questions' => array(
      'variables' => array(),
      'template' => 'templates/loop-dashboard--questions',
    ),
    'loop_dashboard_comments' => array(
      'variables' => array(),
      'template' => 'templates/loop-dashboard--comments',
    ),
    'loop_dashboard_other_content' => array(
      'variables' => array(),
      'template' => 'templates/loop-dashboard--other-content',
    ),
  );
}
